1. Как организован механизм генерации случайных чисел в библиотеке random? Можно задавать начальное значение seed, которое задает начальное состояние генератора - источника случайности. Затем к ним применяется некоторое распределение - средство создания случайных чисел. 
2. Чем отличаются функциональные объекты от функций и лямбда-выражений? У функциональных объектов есть внутреннее состояние. Если такое состояние требуется объявить объект или переменную во внешней области видимости. 
3. Какими наборами возможностей обладают итераторы различных категорий? 
а)input иттератор. Обладают операциями !=, ==, ++, =, *, -> (чтение). Пример - istream_iterator 
б)output иттератор. Обладают операциями !=, ==, ++, =, *, -> (запись). Пример - ostream_iterator
в)forward итератор. Обладают операциями II, OI, многопроходностью. Пример - такие итераторы есть в forward_list. 
г)bidirectional итератор. Обладают операциям FI, --, -. Пример - такие итераторы есть в list, set. 
д)random_access итератор. Обладают операциями BI, +-n, <, >. Пример - такие итераторы есть в векторе и degue. 
Для сдвига итератора вправо-влево надо использовать std::next (it, N) или std::prev(it, N), то есть сдвиг на N вправо-влево. Но они создают копии итераторов. 
4. Какая классификация предлагается для алгоритмов стандартной библиотеки? Немодифицирующие, модифицирующие, для удаления, перестановки, сортировки, упорядоченных диапозонов и численные. 
5. Почему алгоритмы стандартной библиотеки предпочтительнее собственных? Они работают быстрее и лучше на стандартных данных, понятны остальным участникам разработки, экономят время